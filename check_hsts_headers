#!/usr/bin/env python3
import argparse
import sys
import re
import requests

def nagios_exit(message, code):
    print(message)
    sys.exit(code)

try:
    parser = argparse.ArgumentParser(description='Check for Strict-Transport-Security header')
    parser.add_argument('--url', help='the URL to check', required=True)
    parser.add_argument('--maxage',
                        help='Minimum lifetime (max-age directive), default 10368000s (120 days).',
                        required=False, type=int, default=10368000)
    parser.add_argument('--includesubdomains',
                        help='Check for the existance of the includeSubdomains directive',
                        action='store_true')
    args = parser.parse_args()

    url = args.url
    maxage = args.maxage
    includesubdomains = args.includesubdomains

    req = requests.head(url)
    # start with clean slate
    ok_msg = []
    warn_msg = []
    crit_msg = []

    if 'Strict-Transport-Security' in req.headers:
        hsts = req.headers['Strict-Transport-Security']
        m = re.match("max-age=\"?\\b(\\d+)\\b\"?", hsts, re.IGNORECASE)
        if m:
            found_age = int(m.group(1))
            if found_age < maxage:
                warn_msg.append(
                    "max-age directive found, but not long-lived ({0}, while {1} is required).".
                    format(found_age, maxage))
            else:
                ok_msg.append("Long-lived max-age directive found ({0}).".format(found_age))
            if includesubdomains:
                s = re.match(".*\\b(includesubdomains)\\b.*", hsts, re.IGNORECASE)
                if s:
                    ok_msg.append("{0} directive found.".format(s.group(1)))
                else:
                    warn_msg.append("No includeSubomains directive found.")
        else:
            crit_msg.append("No valid max-age directive found.")
    else:
        crit_msg.append("No Strict-Transport-Security header detected.")
except Exception as e:
    nagios_exit("UNKNOWN: Unknown error: {0}.".format(e), 3)

# Exit with accumulated message(s)
if crit_msg:
    nagios_exit("CRITICAL: " + ' '.join(crit_msg + warn_msg), 2)
elif warn_msg:
    nagios_exit("WARNING: " + ' '.join(warn_msg), 1)
else:
    nagios_exit("OK: " + ' '.join(ok_msg), 0)
