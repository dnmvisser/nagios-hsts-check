#!/usr/bin/env python3
import argparse
import sys
import re
import requests

def nagios_exit(message, code):
    print(message)
    sys.exit(code)

def ok(message):
    nagios_exit("OK: " + message, 0)

def warning(message):
    nagios_exit("WARNING: " + message, 1)

def critical(message):
    nagios_exit("CRITICAL: " + message, 2)

def unknown(message):
    nagios_exit("UNKNOWN: " + message, 3)

try:
    parser = argparse.ArgumentParser(description='Check for Strict-Transport-Security header')
    parser.add_argument('--url', help='the URL to check', required=True)
    parser.add_argument('--maxage',
                        help='optional expected minimal value for max-age (default 10368000, i.e. 120 days))',
                        required=False, type=int, default=10368000)
    args = parser.parse_args()

    url = args.url
    maxage = args.maxage

    req = requests.head(url)
    if 'Strict-Transport-Security' in req.headers:
        hsts = req.headers['Strict-Transport-Security']
        m = re.match("^max-age=(\\d+)$", hsts)
        if m:
            found_age = int(m.group(1))
            if found_age < maxage:
                warning("Strict-Transport-Security detected, but not long-lived enough ({0}, while at least {1} is required)".format(found_age, maxage))
            else:
                ok("Strict-Transport-Security detected with long-lived max-age ({0})".format(found_age))
        else:
            critical("Strict-Transport-Security detected, but with invalid value ({0})".format(hsts))
    else:
        critical("No Strict-Transport-Security detected")
except Exception as e:
    unknown("Unknown error: {0}".format(e))
